{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>A rich text editor library for both Jetpack Compose and Compose Multiplatform, fully customizable and supports the common rich text editor features</p> <ul> <li>Multiplatform: Compose Rich Editor supports Compose Multiplatform (Android, iOS, Desktop, Web).</li> <li>Easy to use: Compose Rich Editor's API leverages Kotlin's language features for simplicity and minimal boilerplate.</li> <li>WYSIWYG: Compose Rich Editor is a WYSIWYG editor that supports the most common text styling features.</li> </ul>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"#slack-demo","title":"Slack Demo","text":""},{"location":"#html-to-rich-text","title":"Html to Rich Text","text":""},{"location":"#markdown-to-rich-text","title":"Markdown to Rich Text","text":""},{"location":"#download","title":"Download","text":"<p>Compose Rich Editor is available on <code>mavenCentral()</code>.</p> <pre><code>implementation(\"com.mohamedrejeb.richeditor:richeditor-compose:1.0.0-rc13\")\n</code></pre>"},{"location":"#compatibility","title":"Compatibility","text":"Kotlin version Compose version Compose Rich Editor version 2.1.21 1.8.2 1.0.0-rc13 2.1.10 1.7.3 1.0.0-rc11 2.0.21 1.7.0 1.0.0-rc10 2.0.20 1.6.11 1.0.0-rc09 2.0.10 1.6.11 1.0.0-rc06 2.0.0 1.6.10 1.0.0-rc05-k2 1.9.24 1.6.10 1.0.0-rc05"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#richtextstate","title":"RichTextState","text":"<p>Use <code>RichTextEditor</code> composable to create a rich text editor.</p> <p>The <code>RichTextEditor</code> composable requires a <code>RichTextState</code> to manage the editor's state.</p> <p>To create a <code>RichTextState</code>, use the <code>rememberRichTextState</code> function:</p> <pre><code>val state = rememberRichTextState()\n\nRichTextEditor(\n    state = state,\n)\n</code></pre>"},{"location":"#styling-spans","title":"Styling Spans","text":"<p>To style spans, <code>RichTextState</code> provides <code>toggleSpanStyle</code> method:</p> <pre><code>// Toggle a span style.\nrichTextState.toggleSpanStyle(SpanStyle(fontWeight = FontWeight.Bold))\n</code></pre> <p>To get the current span style of the selection, use <code>RichTextState.currentSpanStyle</code>:</p> <pre><code>// Get the current span style.\nval currentSpanStyle = richTextState.currentSpanStyle\nval isBold = currentSpanStyle.fontWeight = FontWeight.Bold\n</code></pre>"},{"location":"#styling-paragraphs","title":"Styling Paragraphs","text":"<p>To style paragraphs, <code>RichTextState</code> provides <code>toggleParagraphStyle</code> method:</p> <pre><code>// Toggle a paragraph style.\nrichTextState.toggleParagraphStyle(ParagraphStyle(textAlign = TextAlign.Center))\n</code></pre> <p>To get the current paragraph style of the selection, use <code>RichTextState.currentParagraphStyle</code>:</p> <pre><code>// Get the current paragraph style.\nval currentParagraphStyle = richTextState.currentParagraphStyle\nval isCentered = currentParagraphStyle.textAlign = TextAlign.Center\n</code></pre>"},{"location":"#add-links","title":"Add links","text":"<p>To add links, <code>RichTextState</code> provides <code>addLink</code> method:</p> <pre><code>// Add link after selection.\nrichTextState.addLink(\n    text = \"Compose Rich Editor\",\n    url = \"https://github.com/MohamedRejeb/Compose-Rich-Editor\"\n)\n</code></pre> <p>To get if the current selection is a link, use <code>RichTextState.isLink</code>:</p> <pre><code>// Get if the current selection is a link.\nval isLink = richTextState.isLink\n</code></pre> <p>By default, links will be opened by your platform's <code>UriHandler</code>, if however you want to handle the links on your own, you can override the composition local as such:</p> <pre><code>val myUriHandler by remember {\n    mutableStateOf(object : UriHandler {\n        override fun openUri(uri: String) {\n            // Handle the clicked link however you want\n        }\n    })\n}\nCompositionLocalProvider(LocalUriHandler provides myUriHandler) {\n    RichText(\n        state = richTextState,\n        modifier = Modifier.fillMaxWidth()\n    )\n}\n</code></pre>"},{"location":"#add-code-blocks","title":"Add Code Blocks","text":"<p>To add code blocks, <code>RichTextState</code> provides <code>toggleCodeSpan</code> method:</p> <pre><code>// Toggle code span.\nrichTextState.toggleCodeSpan()\n</code></pre> <p>To get if the current selection is a code block, use <code>RichTextState.isCodeSpan</code>:</p> <pre><code>// Get if the current selection is a code span.\nval isCodeSpan = richTextState.isCodeSpan\n</code></pre>"},{"location":"#ordered-and-unordered-lists","title":"Ordered and Unordered Lists","text":"<p>You can add ordered and unordered lists using <code>RichTextState</code>:</p> <pre><code>// Toggle ordered list.\nrichTextState.toggleOrderedList()\n\n// Toggle unordered list.\nrichTextState.toggleUnorderedList()\n</code></pre> <p>You can get if the current selection is an ordered or unordered list, using <code>RichTextState</code>:</p> <pre><code>// Get if the current selection is an ordered list.\nval isOrderedList = richTextState.isOrderedList\n\n// Get if the current selection is an unordered list.\nval isUnorderedList = richTextState.isUnorderedList\n</code></pre>"},{"location":"#customizing-the-rich-text-configuration","title":"Customizing the rich text configuration","text":"<p>Some of the rich text editor's features can be customized, such as the color of the links and the code blocks.</p> <pre><code>richTextState.config.linkColor = Color.Blue\nrichTextState.config.linkTextDecoration = TextDecoration.Underline\nrichTextState.config.codeSpanColor = Color.Yellow\nrichTextState.config.codeSpanBackgroundColor = Color.Transparent\nrichTextState.config.codeSpanStrokeColor = Color.LightGray\n</code></pre>"},{"location":"#html-import-and-export","title":"HTML import and export","text":"<p>To convert HTML to <code>RichTextState</code>, use <code>RichTextState.setHtml</code> method:</p> <pre><code>val html = \"&lt;p&gt;&lt;b&gt;Compose Rich Editor&lt;/b&gt;&lt;/p&gt;\"\nrichTextState.setHtml(html)\n</code></pre> <p>To insert HTML content at a specific position, use <code>RichTextState.insertHtml</code> method:</p> <pre><code>val html = \"&lt;b&gt;inserted content&lt;/b&gt;\"\nrichTextState.insertHtml(html, position = 5)\n</code></pre> <p>To convert <code>RichTextState</code> to HTML, use <code>RichTextState.toHtml</code> method:</p> <pre><code>val html = richTextState.toHtml()\n</code></pre>"},{"location":"#markdown-import-and-export","title":"Markdown import and export","text":"<p>To convert Markdown to <code>RichTextState</code>, use <code>RichTextState.setMarkdown</code> method:</p> <pre><code>val markdown = \"**Compose** *Rich* Editor\"\nrichTextState.setMarkdown(markdown)\n</code></pre> <p>To insert Markdown content at a specific position, use <code>RichTextState.insertMarkdown</code> method:</p> <pre><code>val markdown = \"**inserted** *content*\"\nrichTextState.insertMarkdown(markdown, position = 5)\n</code></pre> <p>To convert <code>RichTextState</code> to Markdown, use <code>RichTextState.toMarkdown</code> method:</p> <pre><code>val markdown = richTextState.toMarkdown()\n</code></pre>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2023 Mohamed Rejeb\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"code_blocks/","title":"Code Formatting","text":""},{"location":"code_blocks/#code-spans","title":"Code Spans","text":"<p>Code spans are used to highlight inline code within text. They are perfect for referencing: - Variable names - Function names - Short code snippets - File names</p> <p>To add code spans, <code>RichTextState</code> provides <code>toggleCodeSpan</code> method:</p> <pre><code>// Toggle code span.\nrichTextState.toggleCodeSpan()\n</code></pre> <p>To get if the current selection is a code span, use <code>RichTextState.isCodeSpan</code>:</p> <pre><code>// Get if the current selection is a code span.\nval isCodeSpan = richTextState.isCodeSpan\n</code></pre> <p>Example of how code spans appear: Normal text with <code>inline code</code> within it.</p>"},{"location":"code_blocks/#code-blocks","title":"Code Blocks","text":"<p>Multiline code blocks are planned for a future release. They will support: - Syntax highlighting - Multiple lines of code - Language specification - Copy to clipboard functionality</p> <p>Stay tuned for updates!</p>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team through GitHub Issues. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"faq/","title":"FAQ","text":"<p>Have a question that isn't part of the FAQ? Open an issue in our GitHub repository.</p>"},{"location":"faq/#common-questions","title":"Common Questions","text":""},{"location":"faq/#how-do-i-get-development-snapshots","title":"How do I get development snapshots?","text":"<p>Add the snapshots repository to your list of repositories in <code>build.gradle.kts</code>:</p> <pre><code>allprojects {\n    repositories {\n        maven(\"https://s01.oss.sonatype.org/content/repositories/snapshots\")\n    }\n}\n</code></pre> <p>Or to your dependency resolution management in <code>settings.gradle.kts</code>:</p> <pre><code>dependencyResolutionManagement {\n    repositories {\n        maven(\"https://s01.oss.sonatype.org/content/repositories/snapshots\")\n    }\n}\n</code></pre> <p>Use the snapshot version:</p> <pre><code>implementation(\"com.mohamedrejeb.richeditor:richeditor-compose:1.0.0-SNAPSHOT\")\n</code></pre> <p>\u26a0\ufe0f Warning: Snapshots are deployed for each new commit on <code>main</code> that passes CI. They can potentially contain breaking changes or may be unstable. Use at your own risk.</p>"},{"location":"faq/#how-do-i-customize-the-appearance-of-links","title":"How do I customize the appearance of links?","text":"<p>You can customize link appearance using the <code>config</code> property of <code>RichTextState</code>:</p> <pre><code>richTextState.config.linkColor = Color.Blue\nrichTextState.config.linkTextDecoration = TextDecoration.Underline\n</code></pre>"},{"location":"faq/#how-do-i-handle-link-clicks","title":"How do I handle link clicks?","text":"<p>By default, links are opened by your platform's <code>UriHandler</code>. To handle links yourself:</p> <pre><code>val myUriHandler = remember {\n    object : UriHandler {\n        override fun openUri(uri: String) {\n            // Your custom link handling logic\n        }\n    }\n}\n\nCompositionLocalProvider(LocalUriHandler provides myUriHandler) {\n    RichText(\n        state = richTextState,\n        modifier = Modifier.fillMaxWidth()\n    )\n}\n</code></pre>"},{"location":"faq/#how-do-i-saverestore-editor-content","title":"How do I save/restore editor content?","text":"<p>You can convert the editor content to HTML or Markdown for storage:</p> <pre><code>// Save content\nval html = richTextState.toHtml()\n// or\nval markdown = richTextState.toMarkdown()\n\n// Restore content\nrichTextState.setHtml(savedHtml)\n// or\nrichTextState.setMarkdown(savedMarkdown)\n</code></pre>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#artifacts","title":"Artifacts","text":"<p>Compose Rich Editor has only one artifact, for now, published to <code>mavenCentral()</code>:</p> <ul> <li><code>com.mohamedrejeb.richeditor:richeditor-compose</code>: The default artifact which includes all the functionalities of the library.</li> </ul> <p>My goal is to move the core functionalities of the library to a separate artifact and keep the default artifact as a wrapper around the core artifact, so I can support other targets like Android Views and Compose HTML.</p>"},{"location":"getting_started/#richtextstate","title":"RichTextState","text":"<p><code>RichTextState</code> is a class that manages the state of the editor.</p> <p>The <code>RichTextEditor</code> composable requires a <code>RichTextState</code> to manage the editor's state.</p> <p>To create a <code>RichTextState</code>, use the <code>rememberRichTextState</code> function:</p> <pre><code>val state = rememberRichTextState()\n\nRichTextEditor(\n    state = state,\n)\n</code></pre> <p>Check out the full documentation for more info.</p>"},{"location":"getting_started/#styling-spans","title":"Styling Spans","text":"<p>To style spans, <code>RichTextState</code> provides <code>toggleSpanStyle</code> method:</p> <pre><code>// Toggle a span style.\nrichTextState.toggleSpanStyle(SpanStyle(fontWeight = FontWeight.Bold))\n</code></pre> <p>To get the current span style of the selection, use <code>RichTextState.currentSpanStyle</code>:</p> <pre><code>// Get the current span style.\nval currentSpanStyle = richTextState.currentSpanStyle\nval isBold = currentSpanStyle.fontWeight == FontWeight.Bold\n</code></pre> <p>Check out the full documentation for more info.</p>"},{"location":"getting_started/#styling-paragraphs","title":"Styling Paragraphs","text":"<p>To style paragraphs, <code>RichTextState</code> provides <code>toggleParagraphStyle</code> method:</p> <pre><code>// Toggle a paragraph style.\nrichTextState.toggleParagraphStyle(ParagraphStyle(textAlign = TextAlign.Center))\n</code></pre> <p>To get the current paragraph style of the selection, use <code>RichTextState.currentParagraphStyle</code>:</p> <pre><code>// Get the current paragraph style.\nval currentParagraphStyle = richTextState.currentParagraphStyle\nval isCentered = currentParagraphStyle.textAlign == TextAlign.Center\n</code></pre> <p>Check out the full documentation for more info.</p>"},{"location":"getting_started/#supported-styling-formats","title":"Supported Styling Formats","text":"<p>The styling formats supported by Compose Rich Editor:</p>"},{"location":"getting_started/#text-formatting","title":"Text Formatting","text":"<ul> <li>Bold</li> <li>Italic</li> <li>Underline</li> <li>Strikethrough</li> <li>Text color</li> <li>Background color</li> <li>Font size</li> <li>Any custom style using <code>SpanStyle</code></li> </ul>"},{"location":"getting_started/#paragraph-formatting","title":"Paragraph Formatting","text":"<ul> <li>Text Align</li> <li>Any custom style using <code>ParagraphStyle</code></li> </ul>"},{"location":"getting_started/#lists-and-blocks","title":"Lists and Blocks","text":"<ul> <li>Ordered List</li> <li>Unordered List</li> <li>Code Blocks</li> </ul>"},{"location":"getting_started/#links","title":"Links","text":"<ul> <li>Hyperlinks</li> </ul> <p>There are some styling formats that are not supported yet, but I'm planning to add them in the future:</p> <ul> <li>Images</li> <li>Blockquotes</li> <li>Multiline Code Blocks</li> <li>Checkbox</li> </ul>"},{"location":"html_import_export/","title":"HTML Import and Export","text":"<p>The Rich Text Editor supports converting between HTML and rich text content. This allows you to: - Save editor content as HTML - Load content from HTML sources - Integrate with HTML-based systems</p>"},{"location":"html_import_export/#importing-html","title":"Importing HTML","text":"<p>To convert HTML to <code>RichTextState</code>, use the <code>setHtml</code> method:</p> <pre><code>// Basic formatting\nval simpleHtml = \"\"\"\n    &lt;p&gt;&lt;b&gt;Bold&lt;/b&gt; and &lt;i&gt;italic&lt;/i&gt; text with &lt;u&gt;underline&lt;/u&gt;&lt;/p&gt;\n\"\"\"\nrichTextState.setHtml(simpleHtml)\n\n// Complex structure\nval complexHtml = \"\"\"\n    &lt;div&gt;\n        &lt;h1&gt;Title&lt;/h1&gt;\n        &lt;p&gt;Paragraph with &lt;strong&gt;bold&lt;/strong&gt; and &lt;em&gt;italic&lt;/em&gt; text.&lt;/p&gt;\n        &lt;ul&gt;\n            &lt;li&gt;Unordered list item 1&lt;/li&gt;\n            &lt;li&gt;Unordered list item 2&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;ol&gt;\n            &lt;li&gt;Ordered list item 1&lt;/li&gt;\n            &lt;li&gt;Ordered list item 2&lt;/li&gt;\n        &lt;/ol&gt;\n        &lt;p&gt;Link to &lt;a href=\"https://example.com\"&gt;Example&lt;/a&gt;&lt;/p&gt;\n        &lt;pre&gt;&lt;code&gt;Code block example&lt;/code&gt;&lt;/pre&gt;\n    &lt;/div&gt;\n\"\"\"\nrichTextState.setHtml(complexHtml)\n</code></pre>"},{"location":"html_import_export/#exporting-to-html","title":"Exporting to HTML","text":"<p>To convert <code>RichTextState</code> to HTML, use the <code>toHtml</code> method:</p> <pre><code>val html = richTextState.toHtml()\nprintln(html) // Outputs formatted HTML string\n</code></pre>"},{"location":"html_import_export/#supported-html-tags","title":"Supported HTML Tags","text":"<p>The following HTML tags are supported:</p>"},{"location":"html_import_export/#text-formatting","title":"Text Formatting","text":"<ul> <li><code>&lt;b&gt;</code>, <code>&lt;strong&gt;</code> - Bold text</li> <li><code>&lt;i&gt;</code>, <code>&lt;em&gt;</code> - Italic text</li> <li><code>&lt;u&gt;</code> - Underlined text</li> <li><code>&lt;s&gt;</code>, <code>&lt;del&gt;</code> - Strikethrough text</li> <li><code>&lt;code&gt;</code> - Code spans</li> </ul>"},{"location":"html_import_export/#structure","title":"Structure","text":"<ul> <li><code>&lt;p&gt;</code> - Paragraphs</li> <li><code>&lt;div&gt;</code> - Divisions</li> <li><code>&lt;br&gt;</code> - Line breaks</li> <li><code>&lt;ul&gt;</code> - Unordered lists</li> <li><code>&lt;ol&gt;</code> - Ordered lists</li> <li><code>&lt;li&gt;</code> - List items</li> </ul>"},{"location":"html_import_export/#links","title":"Links","text":"<ul> <li><code>&lt;a href=\"...\"&gt;</code> - Hyperlinks</li> </ul>"},{"location":"html_import_export/#notes","title":"Notes","text":"<ul> <li>Unsupported HTML tags will be ignored during import</li> <li>Nested lists are supported</li> <li>Custom styles (using style attribute) are not currently supported</li> <li>The HTML output is clean and properly formatted</li> </ul>"},{"location":"links/","title":"Links","text":"<p>The Rich Text Editor provides comprehensive support for hyperlinks, allowing you to: - Add links to new or existing text - Update link URLs - Remove links - Customize link appearance - Handle link clicks</p>"},{"location":"links/#adding-links","title":"Adding Links","text":""},{"location":"links/#new-text-with-link","title":"New Text with Link","text":"<p>To add a new text with a link, use the <code>addLink</code> method:</p> <pre><code>// Add link after selection\nrichTextState.addLink(\n    text = \"Compose Rich Editor\",\n    url = \"https://github.com/MohamedRejeb/Compose-Rich-Editor\"\n)\n</code></pre>"},{"location":"links/#converting-text-to-link","title":"Converting Text to Link","text":"<p>To convert selected text into a link, use the <code>addLinkToSelection</code> method:</p> <pre><code>// Add link to selected text\nrichTextState.addLinkToSelection(\n    url = \"https://kotlinlang.org/\"\n)\n</code></pre>"},{"location":"links/#managing-links","title":"Managing Links","text":""},{"location":"links/#updating-links","title":"Updating Links","text":"<p>To update an existing link's URL:</p> <pre><code>// Update selected link URL\nrichTextState.updateLink(\n    url = \"https://kotlinlang.org/\"\n)\n</code></pre>"},{"location":"links/#removing-links","title":"Removing Links","text":"<p>To remove a link while keeping the text:</p> <pre><code>// Remove link from selected text\nrichTextState.removeLink()\n</code></pre>"},{"location":"links/#link-information","title":"Link Information","text":""},{"location":"links/#checking-link-status","title":"Checking Link Status","text":"<p>To check if the current selection is a link:</p> <pre><code>val isLink = richTextState.isLink\n</code></pre>"},{"location":"links/#getting-link-details","title":"Getting Link Details","text":"<p>To get the current link's text and URL:</p> <pre><code>// Get link text and URL\nval linkText = richTextState.selectedLinkText\nval linkUrl = richTextState.selectedLinkUrl\n</code></pre>"},{"location":"links/#customizing-links","title":"Customizing Links","text":""},{"location":"links/#link-appearance","title":"Link Appearance","text":"<p>You can customize how links appear in the editor:</p> <pre><code>richTextState.config.linkColor = Color.Blue\nrichTextState.config.linkTextDecoration = TextDecoration.Underline\n</code></pre>"},{"location":"links/#handling-link-clicks","title":"Handling Link Clicks","text":"<p>By default, links are opened by your platform's <code>UriHandler</code>. To customize link handling:</p> <pre><code>val myUriHandler = remember {\n    object : UriHandler {\n        override fun openUri(uri: String) {\n            // Custom link handling logic\n            // For example: open in specific browser, validate URL, etc.\n        }\n    }\n}\n\nCompositionLocalProvider(LocalUriHandler provides myUriHandler) {\n    RichText(\n        state = richTextState,\n        modifier = Modifier.fillMaxWidth()\n    )\n}\n</code></pre>"},{"location":"markdown_import_export/","title":"Markdown Import and Export","text":"<p>The Rich Text Editor supports converting between Markdown and rich text content. This allows you to: - Save editor content as Markdown - Load content from Markdown files - Integrate with Markdown-based systems - Support platforms like GitHub that use Markdown</p>"},{"location":"markdown_import_export/#importing-markdown","title":"Importing Markdown","text":"<p>To convert Markdown to <code>RichTextState</code>, use the <code>setMarkdown</code> method:</p> <pre><code>// Basic formatting\nval simpleMarkdown = \"\"\"\n    **Bold** and *italic* text with __underline__\n\"\"\".trimIndent()\nrichTextState.setMarkdown(simpleMarkdown)\n\n// Complex structure\nval complexMarkdown = \"\"\"\n    # Heading 1\n    ## Heading 2\n\n    Paragraph with **bold** and *italic* text.\n\n    * Unordered list item 1\n    * Unordered list item 2\n\n    1. Ordered list item 1\n    2. Ordered list item 2\n\n    [Link to Example](https://example.com)\n\n    `Code span example`\n\"\"\".trimIndent()\nrichTextState.setMarkdown(complexMarkdown)\n</code></pre>"},{"location":"markdown_import_export/#exporting-to-markdown","title":"Exporting to Markdown","text":"<p>To convert <code>RichTextState</code> to Markdown, use the <code>toMarkdown</code> method:</p> <pre><code>val markdown = richTextState.toMarkdown()\nprintln(markdown) // Outputs formatted Markdown string\n</code></pre>"},{"location":"markdown_import_export/#supported-markdown-syntax","title":"Supported Markdown Syntax","text":"<p>The following Markdown syntax elements are supported:</p>"},{"location":"markdown_import_export/#text-formatting","title":"Text Formatting","text":"<ul> <li><code>**text**</code> or <code>__text__</code> - Bold text</li> <li><code>*text*</code> or <code>_text_</code> - Italic text</li> <li><code>~~text~~</code> - Strikethrough text</li> <li><code>`code`</code> - Code spans</li> </ul>"},{"location":"markdown_import_export/#lists","title":"Lists","text":"<ul> <li><code>* item</code> or <code>- item</code> - Unordered list items</li> <li><code>1. item</code> - Ordered list items</li> <li>Nested lists with proper indentation</li> </ul>"},{"location":"markdown_import_export/#links","title":"Links","text":"<ul> <li><code>[text](url)</code> - Hyperlinks</li> </ul>"},{"location":"markdown_import_export/#notes","title":"Notes","text":"<ul> <li>Unsupported Markdown syntax will be preserved as plain text</li> <li>Nested lists are supported with proper indentation</li> <li>The Markdown output is clean and properly formatted</li> <li>Tables and images are planned for future releases</li> </ul>"},{"location":"ordered_unordered_lists/","title":"Ordered and Unordered Lists","text":""},{"location":"ordered_unordered_lists/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Basic Usage</li> <li>List Nesting and Levels</li> <li>List Style Types</li> <li>Ordered Lists</li> <li>Unordered Lists</li> <li>List Indentation</li> <li>Common Operations</li> <li>Default Values</li> <li>Keyboard Shortcuts</li> <li>List Behavior</li> <li>Visual Examples</li> </ul>"},{"location":"ordered_unordered_lists/#basic-usage","title":"Basic Usage","text":"<p>You can add ordered and unordered lists using <code>RichTextState</code>:</p> <pre><code>// Toggle ordered list.\nrichTextState.toggleOrderedList()\n\n// Toggle unordered list.\nrichTextState.toggleUnorderedList()\n</code></pre> <p>You can get if the current selection is an ordered or unordered list, using <code>RichTextState</code>:</p> <pre><code>// Get if the current selection is an ordered list.\nval isOrderedList = richTextState.isOrderedList\n\n// Get if the current selection is an unordered list.\nval isUnorderedList = richTextState.isUnorderedList\n</code></pre>"},{"location":"ordered_unordered_lists/#list-nesting-and-levels","title":"List Nesting and Levels","text":"<p>You can increase or decrease the nesting level of lists using <code>RichTextState</code>:</p> <pre><code>// Increase list level (nesting)\nrichTextState.increaseListLevel()\n\n// Decrease list level (un-nesting)\nrichTextState.decreaseListLevel()\n\n// Check if list level can be increased/decreased\nval canIncrease = richTextState.canIncreaseListLevel\nval canDecrease = richTextState.canDecreaseListLevel\n</code></pre>"},{"location":"ordered_unordered_lists/#list-style-types","title":"List Style Types","text":""},{"location":"ordered_unordered_lists/#ordered-lists","title":"Ordered Lists","text":"<p>You can customize the style of ordered lists using different formats:</p> <pre><code>// Set ordered list style type\nrichTextState.config.orderedListStyleType = OrderedListStyleType.Decimal     // 1, 2, 3, ...\nrichTextState.config.orderedListStyleType = OrderedListStyleType.LowerAlpha  // a, b, c, ...\nrichTextState.config.orderedListStyleType = OrderedListStyleType.UpperAlpha  // A, B, C, ...\nrichTextState.config.orderedListStyleType = OrderedListStyleType.LowerRoman  // i, ii, iii, ...\nrichTextState.config.orderedListStyleType = OrderedListStyleType.UpperRoman  // I, II, III, ...\n\n// Use different styles for different nesting levels\nrichTextState.config.orderedListStyleType = OrderedListStyleType.Multiple(\n    OrderedListStyleType.UpperAlpha,  // First level: A, B, C\n    OrderedListStyleType.LowerAlpha,  // Second level: a, b, c\n    OrderedListStyleType.Decimal      // Third level: 1, 2, 3\n)\n</code></pre>"},{"location":"ordered_unordered_lists/#unordered-lists","title":"Unordered Lists","text":"<p>You can customize the style of unordered lists using different bullet types:</p> <pre><code>// Set unordered list style type\nrichTextState.config.unorderedListStyleType = UnorderedListStyleType.Disc    // \u2022\nrichTextState.config.unorderedListStyleType = UnorderedListStyleType.Circle  // \u25e6\nrichTextState.config.unorderedListStyleType = UnorderedListStyleType.Square  // \u25aa\n\n// Use custom markers for different nesting levels\nrichTextState.config.unorderedListStyleType = UnorderedListStyleType.from(\n    \"\u2022\",  // First level\n    \"\u25e6\",  // Second level\n    \"\u25aa\"   // Third level\n)\n</code></pre>"},{"location":"ordered_unordered_lists/#list-indentation","title":"List Indentation","text":"<p>You can control the list indentation using <code>RichTextState</code>:</p> <pre><code>// Change list indentation (ordered and unordered).\nrichTextState.config.listIndent = 20\n\n// Change only ordered list indentation.\nrichTextState.config.orderedListIndent = 20\n\n// Change only unordered list indentation.\nrichTextState.config.unorderedListIndent = 20\n</code></pre>"},{"location":"ordered_unordered_lists/#common-operations","title":"Common Operations","text":""},{"location":"ordered_unordered_lists/#default-values","title":"Default Values","text":"<p>By default, the Rich Text Editor uses these configurations: - Ordered List Style: <code>OrderedListStyleType.Multiple</code> with:   - First level: <code>Decimal</code> (1, 2, 3, ...)   - Second level: <code>LowerRoman</code> (i, ii, iii, ...)   - Third level: <code>LowerAlpha</code> (a, b, c, ...) - Unordered List Style: <code>UnorderedListStyleType.from</code> with:   - First level: <code>\u2022</code> (bullet)   - Second level: <code>\u25e6</code> (circle)   - Third level: <code>\u25aa</code> (square) - List Indentation: 38 - Exit List on Empty Item: <code>true</code> (configurable via <code>richTextState.config.exitListOnEmptyItem</code>)</p>"},{"location":"ordered_unordered_lists/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>The editor supports common keyboard shortcuts for list operations: - <code>Tab</code>: Increase list level (indent) - <code>Shift + Tab</code>: Decrease list level (outdent) - <code>Enter</code> on an empty list item: Exit the list - <code>Backspace</code> at the start of a list item: Decrease list level or exit list</p>"},{"location":"ordered_unordered_lists/#list-behavior","title":"List Behavior","text":"<p>When working with lists: 1. Creating a new list item:    - Press <code>Enter</code> at the end of a list item to create a new one    - The new item inherits the same level and style as the previous one</p> <ol> <li>Exiting a list:</li> <li>Press <code>Enter</code> on an empty list item (configurable via <code>exitListOnEmptyItem</code>)</li> <li>Press <code>Backspace</code> at the start of an empty list item:<ul> <li>When list level &gt; 1: Decreases the list level by 1</li> <li>When list level = 1: Exits the list</li> </ul> </li> </ol> <p>Note: The behavior of pressing <code>Enter</code> on an empty list item can be configured using <code>richTextState.config.exitListOnEmptyItem</code>. When set to <code>true</code> (default), it exits the list. When set to <code>false</code>, it creates a new list item.</p> <ol> <li>Converting between list types:</li> <li>You can convert between ordered and unordered lists by toggling the respective type</li> <li>The list level and content are preserved during conversion</li> </ol>"},{"location":"ordered_unordered_lists/#visual-examples","title":"Visual Examples","text":"<p>Note: The following examples are representations of how lists might appear. The actual appearance in your application may vary based on your configuration settings (style type, indentation, etc.).</p>"},{"location":"ordered_unordered_lists/#ordered-list-example","title":"Ordered List Example","text":"<pre><code>1. First level item\n   a. Second level item\n      i. Third level item\n   b. Another second level\n2. Back to first level\n</code></pre>"},{"location":"ordered_unordered_lists/#unordered-list-example","title":"Unordered List Example","text":"<pre><code>\u2022 First level item\n  \u25e6 Second level item\n    \u25aa Third level item\n  \u25e6 Another second level\n\u2022 Back to first level\n</code></pre>"},{"location":"ordered_unordered_lists/#related-documentation","title":"Related Documentation","text":"<ul> <li>For HTML list import/export, see HTML Import and Export</li> <li>For Markdown list import/export, see Markdown Import and Export</li> </ul>"},{"location":"paragraph_style/","title":"Paragraph Styling","text":"<p>The Rich Text Editor provides comprehensive support for paragraph styling, allowing you to control: - Text alignment - Line spacing - Paragraph spacing - Text direction - Text indentation</p>"},{"location":"paragraph_style/#basic-usage","title":"Basic Usage","text":""},{"location":"paragraph_style/#applying-styles","title":"Applying Styles","text":"<p>To style paragraphs, <code>RichTextState</code> provides several methods:</p> <pre><code>// Toggle a paragraph style (adds if not present, removes if present)\nrichTextState.toggleParagraphStyle(ParagraphStyle(textAlign = TextAlign.Center))\n\n// Add a paragraph style (overwrites existing value)\nrichTextState.addParagraphStyle(ParagraphStyle(textAlign = TextAlign.Center))\n\n// Remove a paragraph style (restores default value)\nrichTextState.removeParagraphStyle(ParagraphStyle(textAlign = TextAlign.Center))\n</code></pre>"},{"location":"paragraph_style/#checking-current-styles","title":"Checking Current Styles","text":"<p>To get the current paragraph style of the selection:</p> <pre><code>// Get the current paragraph style\nval currentParagraphStyle = richTextState.currentParagraphStyle\n\n// Check text alignment\nval isCentered = currentParagraphStyle.textAlign == TextAlign.Center\nval isLeft = currentParagraphStyle.textAlign == TextAlign.Left\nval isRight = currentParagraphStyle.textAlign == TextAlign.Right\nval isJustified = currentParagraphStyle.textAlign == TextAlign.Justify\n</code></pre>"},{"location":"paragraph_style/#supported-properties","title":"Supported Properties","text":""},{"location":"paragraph_style/#text-alignment","title":"Text Alignment","text":"<pre><code>// Center alignment\nrichTextState.addParagraphStyle(ParagraphStyle(\n    textAlign = TextAlign.Center\n))\n\n// Left alignment\nrichTextState.addParagraphStyle(ParagraphStyle(\n    textAlign = TextAlign.Left\n))\n\n// Right alignment\nrichTextState.addParagraphStyle(ParagraphStyle(\n    textAlign = TextAlign.Right\n))\n\n// Justified alignment\nrichTextState.addParagraphStyle(ParagraphStyle(\n    textAlign = TextAlign.Justify\n))\n</code></pre>"},{"location":"paragraph_style/#line-spacing","title":"Line Spacing","text":"<pre><code>// Set line spacing\nrichTextState.addParagraphStyle(ParagraphStyle(\n    lineHeight = 1.5.em  // 1.5 times the font size\n))\n</code></pre>"},{"location":"paragraph_style/#text-direction","title":"Text Direction","text":"<pre><code>// Right-to-left text direction\nrichTextState.addParagraphStyle(ParagraphStyle(\n    textDirection = TextDirection.Rtl\n))\n\n// Left-to-right text direction\nrichTextState.addParagraphStyle(ParagraphStyle(\n    textDirection = TextDirection.Ltr\n))\n</code></pre>"},{"location":"paragraph_style/#text-indentation","title":"Text Indentation","text":"<pre><code>// Set text indentation\nrichTextState.addParagraphStyle(ParagraphStyle(\n    textIndent = TextIndent(\n        firstLine = 20.sp,    // First line indent\n        restLine = 10.sp      // Rest of lines indent\n    )\n))\n</code></pre>"},{"location":"paragraph_style/#related-documentation","title":"Related Documentation","text":"<ul> <li>For HTML paragraph style import/export, see HTML Import and Export</li> <li>For Markdown paragraph style import/export, see Markdown Import and Export</li> </ul>"},{"location":"rich_text_state/","title":"RichTextState","text":"<p><code>RichTextState</code> is the core component that manages the state of the Rich Text Editor. It handles: - Text content and styling - Selection and cursor position - Configuration settings - Text operations and modifications - Import/export functionality</p>"},{"location":"rich_text_state/#basic-usage","title":"Basic Usage","text":""},{"location":"rich_text_state/#creating-the-state","title":"Creating the State","text":"<p>To create a <code>RichTextState</code>, use the <code>rememberRichTextState</code> function:</p> <pre><code>val state = rememberRichTextState()\n\nRichTextEditor(\n    state = state,\n    modifier = Modifier.fillMaxWidth()\n)\n</code></pre>"},{"location":"rich_text_state/#configuration","title":"Configuration","text":""},{"location":"rich_text_state/#appearance-settings","title":"Appearance Settings","text":"<pre><code>// Link appearance\nrichTextState.config.linkColor = Color.Blue\nrichTextState.config.linkTextDecoration = TextDecoration.Underline\n\n// Code block appearance\nrichTextState.config.codeSpanColor = Color.Yellow\nrichTextState.config.codeSpanBackgroundColor = Color.Transparent\nrichTextState.config.codeSpanStrokeColor = Color.LightGray\n</code></pre>"},{"location":"rich_text_state/#list-configuration","title":"List Configuration","text":"<pre><code>// Global list indentation\nrichTextState.config.listIndent = 20\n\n// Specific list type indentation\nrichTextState.config.orderedListIndent = 20\nrichTextState.config.unorderedListIndent = 20\n\n// List behavior\nrichTextState.config.exitListOnEmptyItem = true  // Exit list when pressing Enter on empty item\n</code></pre>"},{"location":"rich_text_state/#text-operations","title":"Text Operations","text":""},{"location":"rich_text_state/#selection-management","title":"Selection Management","text":"<p>The editor's selection can be controlled programmatically:</p> <pre><code>// Set selection range\nrichTextState.selection = TextRange(0, 5)\n\n// Select all text\nrichTextState.selection = TextRange(0, richTextState.annotatedString.text.length)\n\n// Move cursor to end\nrichTextState.selection = TextRange(richTextState.annotatedString.text.length)\n</code></pre>"},{"location":"rich_text_state/#text-modification","title":"Text Modification","text":"<p>The <code>RichTextState</code> provides methods to modify text while preserving styles:</p> <pre><code>// Insert text at specific position\nrichTextState.addTextAtIndex(5, \"Hello\")\n\n// Insert text after current selection\nrichTextState.addTextAfterSelection(\"Hello\")\n\n// Remove text\nrichTextState.removeTextRange(TextRange(0, 5))\nrichTextState.removeSelectedText()\n\n// Replace text\nrichTextState.replaceTextRange(TextRange(0, 5), \"Hello\")\nrichTextState.replaceSelectedText(\"Hello\")\n</code></pre>"},{"location":"rich_text_state/#text-change-monitoring","title":"Text Change Monitoring","text":"<p>You can monitor text changes using the <code>annotatedString</code> property:</p> <pre><code>LaunchedEffect(richTextState.annotatedString) {\n    // Handle text changes\n    println(\"Text changed: ${richTextState.annotatedString.text}\")\n}\n</code></pre>"},{"location":"rich_text_state/#state-persistence","title":"State Persistence","text":"<p>To save and restore the editor's state:</p> <pre><code>// Save state\nval html = richTextState.toHtml()\n// or\nval markdown = richTextState.toMarkdown()\n\n// Restore state\nrichTextState.setHtml(savedHtml)\n// or\nrichTextState.setMarkdown(savedMarkdown)\n</code></pre>"},{"location":"rich_text_state/#related-documentation","title":"Related Documentation","text":"<ul> <li>For styling text spans, see Span Style</li> <li>For styling paragraphs, see Paragraph Style</li> <li>For working with lists, see Ordered and Unordered Lists</li> <li>For HTML conversion, see HTML Import and Export</li> <li>For Markdown conversion, see Markdown Import and Export</li> </ul>"},{"location":"span_style/","title":"Span Styling","text":"<p>Span styles allow you to format individual characters or ranges of text within a paragraph. You can control: - Font weight (bold) - Font style (italic) - Text decoration (underline, strikethrough) - Text color - Background color - Font size - Font family - Letter spacing - And more</p>"},{"location":"span_style/#basic-usage","title":"Basic Usage","text":""},{"location":"span_style/#applying-styles","title":"Applying Styles","text":"<p>The <code>RichTextState</code> provides several methods to manage span styles:</p> <pre><code>// Toggle a style (add if not present, remove if present)\nrichTextState.toggleSpanStyle(SpanStyle(fontWeight = FontWeight.Bold))\n\n// Add a style (overwrites existing value)\nrichTextState.addSpanStyle(SpanStyle(fontWeight = FontWeight.Bold))\n\n// Add a style to specific range\nrichTextState.addSpanStyle(\n    spanStyle = SpanStyle(fontWeight = FontWeight.Bold),\n    textRange = TextRange(0, 5)\n)\n\n// Remove a style\nrichTextState.removeSpanStyle(SpanStyle(fontWeight = FontWeight.Bold))\n\n// Remove a style from specific range\nrichTextState.removeSpanStyle(\n    spanStyle = SpanStyle(fontWeight = FontWeight.Bold),\n    textRange = TextRange(0, 5)\n)\n</code></pre>"},{"location":"span_style/#checking-current-styles","title":"Checking Current Styles","text":"<p>To get the current span style of the selection:</p> <pre><code>val currentSpanStyle = richTextState.currentSpanStyle\n\n// Check common style properties\nval isBold = currentSpanStyle.fontWeight == FontWeight.Bold\nval isItalic = currentSpanStyle.fontStyle == FontStyle.Italic\nval isUnderlined = currentSpanStyle.textDecoration == TextDecoration.Underline\n\n// Check style at specific range\nval rangeStyle = richTextState.getSpanStyle(TextRange(0, 5))\nval isRangeBold = rangeStyle.fontWeight == FontWeight.Bold\n</code></pre>"},{"location":"span_style/#supported-properties","title":"Supported Properties","text":""},{"location":"span_style/#text-formatting","title":"Text Formatting","text":"<pre><code>// Font weight\nrichTextState.addSpanStyle(SpanStyle(\n    fontWeight = FontWeight.Bold  // or FontWeight.W500, etc.\n))\n\n// Font style\nrichTextState.addSpanStyle(SpanStyle(\n    fontStyle = FontStyle.Italic\n))\n\n// Text decoration\nrichTextState.addSpanStyle(SpanStyle(\n    textDecoration = TextDecoration.Underline\n    // or TextDecoration.LineThrough\n    // or TextDecoration.combine(listOf(TextDecoration.Underline, TextDecoration.LineThrough))\n))\n</code></pre>"},{"location":"span_style/#colors-and-size","title":"Colors and Size","text":"<pre><code>// Text color\nrichTextState.addSpanStyle(SpanStyle(\n    color = Color.Blue\n))\n\n// Background color\nrichTextState.addSpanStyle(SpanStyle(\n    background = Color.Yellow\n))\n\n// Font size\nrichTextState.addSpanStyle(SpanStyle(\n    fontSize = 18.sp\n))\n</code></pre>"},{"location":"span_style/#advanced-properties","title":"Advanced Properties","text":"<pre><code>// Font family\nrichTextState.addSpanStyle(SpanStyle(\n    fontFamily = FontFamily.Monospace\n))\n\n// Letter spacing\nrichTextState.addSpanStyle(SpanStyle(\n    letterSpacing = 2.sp\n))\n\n// Baseline shift (subscript/superscript)\nrichTextState.addSpanStyle(SpanStyle(\n    baselineShift = BaselineShift.Superscript\n    // or BaselineShift.Subscript\n))\n</code></pre>"},{"location":"span_style/#combining-styles","title":"Combining Styles","text":"<p>You can combine multiple style properties in a single SpanStyle:</p> <pre><code>richTextState.addSpanStyle(SpanStyle(\n    fontWeight = FontWeight.Bold,\n    fontStyle = FontStyle.Italic,\n    color = Color.Blue,\n    fontSize = 16.sp,\n    background = Color.Yellow.copy(alpha = 0.3f)\n))\n</code></pre>"},{"location":"span_style/#visual-examples","title":"Visual Examples","text":"<p>Here's how different span styles might appear:</p> <pre><code>Normal text\n**Bold text**\n*Italic text*\n__Underlined text__\n~~Strikethrough text~~\n`Code text`\n</code></pre>"},{"location":"span_style/#related-documentation","title":"Related Documentation","text":"<ul> <li>For paragraph styling, see Paragraph Style</li> <li>For HTML conversion, see HTML Import and Export</li> <li>For Markdown conversion, see Markdown Import and Export</li> </ul>"},{"location":"upgrading/","title":"Upgrading from Compose Rich Editor 0.x to 1.x","text":"<p>This is a short guide to highlight the main changes when upgrading from Compose Rich Editor 0.x to 1.x and how to handle them.</p>"},{"location":"upgrading/#calling-richtexteditor-with-richtextstate","title":"Calling <code>RichTextEditor</code> with <code>RichTextState</code>","text":"<p>In 0.x you would use <code>RichTextValue</code> to create the rich text state and pass it to <code>RichTextEditor</code>:</p> <pre><code>var richTextValue by remember { mutableStateOf(RichTextValue()) }\n\nRichTextEditor(\n    value = richTextValue,\n    onValueChange = {\n        richTextValue = it\n    },\n)\n</code></pre> <p>In 1.x <code>RichTextValue</code> is deprecated and you should use <code>RichTextState</code> instead:</p> <pre><code>val richTextState = rememberRichTextState()\n\nRichTextEditor(\n    state = richTextState,\n)\n</code></pre>"}]}